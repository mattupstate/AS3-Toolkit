package net.nobien.events 
{
    import flash.events.Event;

    /**
     * A LoadEvent object is dispatched when a load operation has begun, has made progress, has completed, or has been stopped. 
     * These events are usually generated by classes that manage the loading of external files or queues of files.
     */
    public class LoadEvent extends Event 
    {
        /**
         * The <code>LoadEvent.LOAD_COMPLETE</code> constant defines the value of the type property of an <code>loadComplete</code> event object.
         */
        public static const LOAD_COMPLETE:String = "loadComplete";
        
        /**
         * The <code>LoadEvent.LOAD_PROGRESS</code> constant defines the value of the type property of an <code>loadProgress</code> event object.
         */
        public static const LOAD_PROGRESS:String = "loadProgress";
        
        /**
         * The <code>LoadEvent.LOAD_START</code> constant defines the value of the type property of an <code>loadStart</code> event object.
         */
        public static const LOAD_START:String = "loadStart";
        
        /**
         * The <code>LoadEvent.LOAD_STOP</code> constant defines the value of the type property of an <code>loadStop</code> event object.
         */
        public static const LOAD_STOP:String = "loadStop";
        
        private var _progress:Number;
        
        /**
         * Creates a LoadEvent object to pass as a parameter to event listeners.
         * @param	type The type of the event, accessible as LoadEvent.type.
         * @param	bubbles	Determines whether the LoadEvent object participates in the bubbling stage of the event flow. The default value is false.
         * @param	cancelable Determines whether the LoadEvent object can be canceled. The default values is false.
         * @param	progress A value between 0 and 1 representing the load progress at the time the listener processes the event.
         */
        public function LoadEvent( type:String, bubbles:Boolean = false, cancelable:Boolean = false, progress:Number = 0 ) 
        { 
            super( type, bubbles, cancelable );
            _progress = progress;
        } 
        
        public override function clone():Event 
        { 
            return new LoadEvent( type, bubbles, cancelable, progress );
        } 
        
        public override function toString():String 
        { 
            return formatToString( "LoadEvent", "type", "bubbles", "cancelable", "eventPhase", "progress" ); 
        }
        
        /**
         * A value between 0 and 1 representing the load progress at the time the listener processes the event.
         */
        public function get progress():Number { return _progress; }
    }
}