package net.nobien.collection {	import net.nobien.utils.ArrayUtil;    	public class List implements IList     {		protected var _collection:Array;        		public function List( collection:Array = null )         {			_collection = ( collection == null ) ? [] : collection.concat();		}				public function addItem( item:* ):Boolean         {			_collection.push( item );			return true;		}				public function addItemAt( item:*, index:int ):Boolean         {			_collection.splice( index, 0, item );			return true;		}				public function addItems( items:IList ):Boolean         {			_collection = _collection.concat( items.toArray() );			return true;		}				public function addItemsAt( items:IList, index:int = 0x7fffffff ):Boolean         {			return ArrayUtil.addItemsAt( _collection, items.toArray(), index );		}				public function clear():void {			_collection.splice( 0 );		}				public function contains( item:* ):Boolean         {			return ( indexOf( item ) == -1 ) ? false : true;		}				public function containsAll( items:IList ):Boolean         {			return ArrayUtil.containsAll( _collection, items.toArray() );		}				public function equals( list:IList ):Boolean         {			return ArrayUtil.equals( _collection, list.toArray() );		}				public function getItemAt( index:uint ):*         {			return _collection[index];		}				public function subList( startIndex:int = 0, endIndex:int = 16777215 ):IList         {			return new List( _collection.slice( startIndex, endIndex ) );		}				public function indexOf( item:*, fromIndex:int = 0 ):int         {			return _collection.indexOf( item, fromIndex );		}				public function isEmpty():Boolean         {			return length == 0;		}		        public function lastIndexOf( item:*, fromIndex:int = 0x7fffffff ):int         {			return _collection.lastIndexOf( item, fromIndex );		}				public function get length():uint         {			return _collection.length;		}				public function removeAllInstancesOfItem( item:* ):Boolean         {			return ArrayUtil.removeItem( _collection, item ) != 0;		}				public function removeItem( item:* ):Boolean         {			var i:int = _collection.indexOf( item );			if ( i == -1 ) return false;			_collection.splice( i, 1 );			return true;		}				public function removeItemAt( index:int ):*        {			return _collection.splice( index, 1 )[0];		}				public function removeItems( items:IList ):Boolean         {			return ArrayUtil.removeItems( _collection, items.toArray() );		}				public function retainItems( items:IList ):Boolean         {			return ArrayUtil.retainItems( _collection, items.toArray() );		}				public function setItem( item:*, index:int ):*         {			return _collection.splice( index, 1, item )[0];		}				public function toArray():Array         {			return _collection.concat();		}				public function clone():IList         {			return new List( toArray() );		}				public function toString():String         {			return _collection.toString();		}	}}